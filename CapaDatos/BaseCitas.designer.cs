#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaDatos
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProyectoCitas")]
	public partial class BaseCitasDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertCitas(Citas instance);
    partial void UpdateCitas(Citas instance);
    partial void DeleteCitas(Citas instance);
    partial void InsertEspecialidad(Especialidad instance);
    partial void UpdateEspecialidad(Especialidad instance);
    partial void DeleteEspecialidad(Especialidad instance);
    partial void InsertEspecialidadMedico(EspecialidadMedico instance);
    partial void UpdateEspecialidadMedico(EspecialidadMedico instance);
    partial void DeleteEspecialidadMedico(EspecialidadMedico instance);
    partial void InsertMedico(Medico instance);
    partial void UpdateMedico(Medico instance);
    partial void DeleteMedico(Medico instance);
    partial void InsertMedico_Horario(Medico_Horario instance);
    partial void UpdateMedico_Horario(Medico_Horario instance);
    partial void DeleteMedico_Horario(Medico_Horario instance);
    partial void InsertPaciente(Paciente instance);
    partial void UpdatePaciente(Paciente instance);
    partial void DeletePaciente(Paciente instance);
    partial void InsertPersona(Persona instance);
    partial void UpdatePersona(Persona instance);
    partial void DeletePersona(Persona instance);
    partial void InsertTipo_usuario(Tipo_usuario instance);
    partial void UpdateTipo_usuario(Tipo_usuario instance);
    partial void DeleteTipo_usuario(Tipo_usuario instance);
    #endregion
		
		public BaseCitasDataContext() : 
				base(global::CapaDatos.Properties.Settings.Default.ProyectoCitasConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BaseCitasDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BaseCitasDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BaseCitasDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BaseCitasDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Citas> Citas
		{
			get
			{
				return this.GetTable<Citas>();
			}
		}
		
		public System.Data.Linq.Table<Especialidad> Especialidad
		{
			get
			{
				return this.GetTable<Especialidad>();
			}
		}
		
		public System.Data.Linq.Table<EspecialidadMedico> EspecialidadMedico
		{
			get
			{
				return this.GetTable<EspecialidadMedico>();
			}
		}
		
		public System.Data.Linq.Table<Medico> Medico
		{
			get
			{
				return this.GetTable<Medico>();
			}
		}
		
		public System.Data.Linq.Table<Medico_Horario> Medico_Horario
		{
			get
			{
				return this.GetTable<Medico_Horario>();
			}
		}
		
		public System.Data.Linq.Table<Paciente> Paciente
		{
			get
			{
				return this.GetTable<Paciente>();
			}
		}
		
		public System.Data.Linq.Table<Persona> Persona
		{
			get
			{
				return this.GetTable<Persona>();
			}
		}
		
		public System.Data.Linq.Table<Tipo_usuario> Tipo_usuario
		{
			get
			{
				return this.GetTable<Tipo_usuario>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Citas")]
	public partial class Citas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cita_id;
		
		private string _cita_estado;
		
		private System.Nullable<int> _paci_id;
		
		private int _medhor_id;
		
		private int _espmed_id;
		
		private EntityRef<EspecialidadMedico> _EspecialidadMedico;
		
		private EntityRef<Medico_Horario> _Medico_Horario;
		
		private EntityRef<Paciente> _Paciente;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncita_idChanging(int value);
    partial void Oncita_idChanged();
    partial void Oncita_estadoChanging(string value);
    partial void Oncita_estadoChanged();
    partial void Onpaci_idChanging(System.Nullable<int> value);
    partial void Onpaci_idChanged();
    partial void Onmedhor_idChanging(int value);
    partial void Onmedhor_idChanged();
    partial void Onespmed_idChanging(int value);
    partial void Onespmed_idChanged();
    #endregion
		
		public Citas()
		{
			this._EspecialidadMedico = default(EntityRef<EspecialidadMedico>);
			this._Medico_Horario = default(EntityRef<Medico_Horario>);
			this._Paciente = default(EntityRef<Paciente>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cita_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cita_id
		{
			get
			{
				return this._cita_id;
			}
			set
			{
				if ((this._cita_id != value))
				{
					this.Oncita_idChanging(value);
					this.SendPropertyChanging();
					this._cita_id = value;
					this.SendPropertyChanged("cita_id");
					this.Oncita_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cita_estado", DbType="VarChar(20)")]
		public string cita_estado
		{
			get
			{
				return this._cita_estado;
			}
			set
			{
				if ((this._cita_estado != value))
				{
					this.Oncita_estadoChanging(value);
					this.SendPropertyChanging();
					this._cita_estado = value;
					this.SendPropertyChanged("cita_estado");
					this.Oncita_estadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paci_id", DbType="Int")]
		public System.Nullable<int> paci_id
		{
			get
			{
				return this._paci_id;
			}
			set
			{
				if ((this._paci_id != value))
				{
					if (this._Paciente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpaci_idChanging(value);
					this.SendPropertyChanging();
					this._paci_id = value;
					this.SendPropertyChanged("paci_id");
					this.Onpaci_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medhor_id", DbType="Int NOT NULL")]
		public int medhor_id
		{
			get
			{
				return this._medhor_id;
			}
			set
			{
				if ((this._medhor_id != value))
				{
					if (this._Medico_Horario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmedhor_idChanging(value);
					this.SendPropertyChanging();
					this._medhor_id = value;
					this.SendPropertyChanged("medhor_id");
					this.Onmedhor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_espmed_id", DbType="Int NOT NULL")]
		public int espmed_id
		{
			get
			{
				return this._espmed_id;
			}
			set
			{
				if ((this._espmed_id != value))
				{
					if (this._EspecialidadMedico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onespmed_idChanging(value);
					this.SendPropertyChanging();
					this._espmed_id = value;
					this.SendPropertyChanged("espmed_id");
					this.Onespmed_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EspecialidadMedico_Citas", Storage="_EspecialidadMedico", ThisKey="espmed_id", OtherKey="espmed_id", IsForeignKey=true)]
		public EspecialidadMedico EspecialidadMedico
		{
			get
			{
				return this._EspecialidadMedico.Entity;
			}
			set
			{
				EspecialidadMedico previousValue = this._EspecialidadMedico.Entity;
				if (((previousValue != value) 
							|| (this._EspecialidadMedico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EspecialidadMedico.Entity = null;
						previousValue.Citas.Remove(this);
					}
					this._EspecialidadMedico.Entity = value;
					if ((value != null))
					{
						value.Citas.Add(this);
						this._espmed_id = value.espmed_id;
					}
					else
					{
						this._espmed_id = default(int);
					}
					this.SendPropertyChanged("EspecialidadMedico");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_Horario_Citas", Storage="_Medico_Horario", ThisKey="medhor_id", OtherKey="medhor_id", IsForeignKey=true)]
		public Medico_Horario Medico_Horario
		{
			get
			{
				return this._Medico_Horario.Entity;
			}
			set
			{
				Medico_Horario previousValue = this._Medico_Horario.Entity;
				if (((previousValue != value) 
							|| (this._Medico_Horario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medico_Horario.Entity = null;
						previousValue.Citas.Remove(this);
					}
					this._Medico_Horario.Entity = value;
					if ((value != null))
					{
						value.Citas.Add(this);
						this._medhor_id = value.medhor_id;
					}
					else
					{
						this._medhor_id = default(int);
					}
					this.SendPropertyChanged("Medico_Horario");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Citas", Storage="_Paciente", ThisKey="paci_id", OtherKey="paci_id", IsForeignKey=true)]
		public Paciente Paciente
		{
			get
			{
				return this._Paciente.Entity;
			}
			set
			{
				Paciente previousValue = this._Paciente.Entity;
				if (((previousValue != value) 
							|| (this._Paciente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Paciente.Entity = null;
						previousValue.Citas.Remove(this);
					}
					this._Paciente.Entity = value;
					if ((value != null))
					{
						value.Citas.Add(this);
						this._paci_id = value.paci_id;
					}
					else
					{
						this._paci_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Paciente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Especialidad")]
	public partial class Especialidad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _espe_id;
		
		private string _espe_descripcion;
		
		private EntitySet<EspecialidadMedico> _EspecialidadMedico;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onespe_idChanging(int value);
    partial void Onespe_idChanged();
    partial void Onespe_descripcionChanging(string value);
    partial void Onespe_descripcionChanged();
    #endregion
		
		public Especialidad()
		{
			this._EspecialidadMedico = new EntitySet<EspecialidadMedico>(new Action<EspecialidadMedico>(this.attach_EspecialidadMedico), new Action<EspecialidadMedico>(this.detach_EspecialidadMedico));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_espe_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int espe_id
		{
			get
			{
				return this._espe_id;
			}
			set
			{
				if ((this._espe_id != value))
				{
					this.Onespe_idChanging(value);
					this.SendPropertyChanging();
					this._espe_id = value;
					this.SendPropertyChanged("espe_id");
					this.Onespe_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_espe_descripcion", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string espe_descripcion
		{
			get
			{
				return this._espe_descripcion;
			}
			set
			{
				if ((this._espe_descripcion != value))
				{
					this.Onespe_descripcionChanging(value);
					this.SendPropertyChanging();
					this._espe_descripcion = value;
					this.SendPropertyChanged("espe_descripcion");
					this.Onespe_descripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidad_EspecialidadMedico", Storage="_EspecialidadMedico", ThisKey="espe_id", OtherKey="espe_id")]
		public EntitySet<EspecialidadMedico> EspecialidadMedico
		{
			get
			{
				return this._EspecialidadMedico;
			}
			set
			{
				this._EspecialidadMedico.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EspecialidadMedico(EspecialidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Especialidad = this;
		}
		
		private void detach_EspecialidadMedico(EspecialidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Especialidad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EspecialidadMedico")]
	public partial class EspecialidadMedico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _espmed_id;
		
		private int _med_id;
		
		private int _espe_id;
		
		private EntitySet<Citas> _Citas;
		
		private EntityRef<Especialidad> _Especialidad;
		
		private EntityRef<Medico> _Medico;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onespmed_idChanging(int value);
    partial void Onespmed_idChanged();
    partial void Onmed_idChanging(int value);
    partial void Onmed_idChanged();
    partial void Onespe_idChanging(int value);
    partial void Onespe_idChanged();
    #endregion
		
		public EspecialidadMedico()
		{
			this._Citas = new EntitySet<Citas>(new Action<Citas>(this.attach_Citas), new Action<Citas>(this.detach_Citas));
			this._Especialidad = default(EntityRef<Especialidad>);
			this._Medico = default(EntityRef<Medico>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_espmed_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int espmed_id
		{
			get
			{
				return this._espmed_id;
			}
			set
			{
				if ((this._espmed_id != value))
				{
					this.Onespmed_idChanging(value);
					this.SendPropertyChanging();
					this._espmed_id = value;
					this.SendPropertyChanged("espmed_id");
					this.Onespmed_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_med_id", DbType="Int NOT NULL")]
		public int med_id
		{
			get
			{
				return this._med_id;
			}
			set
			{
				if ((this._med_id != value))
				{
					if (this._Medico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmed_idChanging(value);
					this.SendPropertyChanging();
					this._med_id = value;
					this.SendPropertyChanged("med_id");
					this.Onmed_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_espe_id", DbType="Int NOT NULL")]
		public int espe_id
		{
			get
			{
				return this._espe_id;
			}
			set
			{
				if ((this._espe_id != value))
				{
					if (this._Especialidad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onespe_idChanging(value);
					this.SendPropertyChanging();
					this._espe_id = value;
					this.SendPropertyChanged("espe_id");
					this.Onespe_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EspecialidadMedico_Citas", Storage="_Citas", ThisKey="espmed_id", OtherKey="espmed_id")]
		public EntitySet<Citas> Citas
		{
			get
			{
				return this._Citas;
			}
			set
			{
				this._Citas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidad_EspecialidadMedico", Storage="_Especialidad", ThisKey="espe_id", OtherKey="espe_id", IsForeignKey=true)]
		public Especialidad Especialidad
		{
			get
			{
				return this._Especialidad.Entity;
			}
			set
			{
				Especialidad previousValue = this._Especialidad.Entity;
				if (((previousValue != value) 
							|| (this._Especialidad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especialidad.Entity = null;
						previousValue.EspecialidadMedico.Remove(this);
					}
					this._Especialidad.Entity = value;
					if ((value != null))
					{
						value.EspecialidadMedico.Add(this);
						this._espe_id = value.espe_id;
					}
					else
					{
						this._espe_id = default(int);
					}
					this.SendPropertyChanged("Especialidad");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_EspecialidadMedico", Storage="_Medico", ThisKey="med_id", OtherKey="med_id", IsForeignKey=true)]
		public Medico Medico
		{
			get
			{
				return this._Medico.Entity;
			}
			set
			{
				Medico previousValue = this._Medico.Entity;
				if (((previousValue != value) 
							|| (this._Medico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medico.Entity = null;
						previousValue.EspecialidadMedico.Remove(this);
					}
					this._Medico.Entity = value;
					if ((value != null))
					{
						value.EspecialidadMedico.Add(this);
						this._med_id = value.med_id;
					}
					else
					{
						this._med_id = default(int);
					}
					this.SendPropertyChanged("Medico");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.EspecialidadMedico = this;
		}
		
		private void detach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.EspecialidadMedico = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medico")]
	public partial class Medico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _med_id;
		
		private string _med_abreviatura;
		
		private int _per_id;
		
		private EntitySet<EspecialidadMedico> _EspecialidadMedico;
		
		private EntitySet<Medico_Horario> _Medico_Horario;
		
		private EntityRef<Persona> _Persona;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmed_idChanging(int value);
    partial void Onmed_idChanged();
    partial void Onmed_abreviaturaChanging(string value);
    partial void Onmed_abreviaturaChanged();
    partial void Onper_idChanging(int value);
    partial void Onper_idChanged();
    #endregion
		
		public Medico()
		{
			this._EspecialidadMedico = new EntitySet<EspecialidadMedico>(new Action<EspecialidadMedico>(this.attach_EspecialidadMedico), new Action<EspecialidadMedico>(this.detach_EspecialidadMedico));
			this._Medico_Horario = new EntitySet<Medico_Horario>(new Action<Medico_Horario>(this.attach_Medico_Horario), new Action<Medico_Horario>(this.detach_Medico_Horario));
			this._Persona = default(EntityRef<Persona>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_med_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int med_id
		{
			get
			{
				return this._med_id;
			}
			set
			{
				if ((this._med_id != value))
				{
					this.Onmed_idChanging(value);
					this.SendPropertyChanging();
					this._med_id = value;
					this.SendPropertyChanged("med_id");
					this.Onmed_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_med_abreviatura", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string med_abreviatura
		{
			get
			{
				return this._med_abreviatura;
			}
			set
			{
				if ((this._med_abreviatura != value))
				{
					this.Onmed_abreviaturaChanging(value);
					this.SendPropertyChanging();
					this._med_abreviatura = value;
					this.SendPropertyChanged("med_abreviatura");
					this.Onmed_abreviaturaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_id", DbType="Int NOT NULL")]
		public int per_id
		{
			get
			{
				return this._per_id;
			}
			set
			{
				if ((this._per_id != value))
				{
					if (this._Persona.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onper_idChanging(value);
					this.SendPropertyChanging();
					this._per_id = value;
					this.SendPropertyChanged("per_id");
					this.Onper_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_EspecialidadMedico", Storage="_EspecialidadMedico", ThisKey="med_id", OtherKey="med_id")]
		public EntitySet<EspecialidadMedico> EspecialidadMedico
		{
			get
			{
				return this._EspecialidadMedico;
			}
			set
			{
				this._EspecialidadMedico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_Medico_Horario", Storage="_Medico_Horario", ThisKey="med_id", OtherKey="med_id")]
		public EntitySet<Medico_Horario> Medico_Horario
		{
			get
			{
				return this._Medico_Horario;
			}
			set
			{
				this._Medico_Horario.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persona_Medico", Storage="_Persona", ThisKey="per_id", OtherKey="per_id", IsForeignKey=true)]
		public Persona Persona
		{
			get
			{
				return this._Persona.Entity;
			}
			set
			{
				Persona previousValue = this._Persona.Entity;
				if (((previousValue != value) 
							|| (this._Persona.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persona.Entity = null;
						previousValue.Medico.Remove(this);
					}
					this._Persona.Entity = value;
					if ((value != null))
					{
						value.Medico.Add(this);
						this._per_id = value.per_id;
					}
					else
					{
						this._per_id = default(int);
					}
					this.SendPropertyChanged("Persona");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EspecialidadMedico(EspecialidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Medico = this;
		}
		
		private void detach_EspecialidadMedico(EspecialidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Medico = null;
		}
		
		private void attach_Medico_Horario(Medico_Horario entity)
		{
			this.SendPropertyChanging();
			entity.Medico = this;
		}
		
		private void detach_Medico_Horario(Medico_Horario entity)
		{
			this.SendPropertyChanging();
			entity.Medico = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medico_Horario")]
	public partial class Medico_Horario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _medhor_id;
		
		private int _med_id;
		
		private System.DateTime _medhor_fecha;
		
		private string _medhor_hora;
		
		private EntitySet<Citas> _Citas;
		
		private EntityRef<Medico> _Medico;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmedhor_idChanging(int value);
    partial void Onmedhor_idChanged();
    partial void Onmed_idChanging(int value);
    partial void Onmed_idChanged();
    partial void Onmedhor_fechaChanging(System.DateTime value);
    partial void Onmedhor_fechaChanged();
    partial void Onmedhor_horaChanging(string value);
    partial void Onmedhor_horaChanged();
    #endregion
		
		public Medico_Horario()
		{
			this._Citas = new EntitySet<Citas>(new Action<Citas>(this.attach_Citas), new Action<Citas>(this.detach_Citas));
			this._Medico = default(EntityRef<Medico>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medhor_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int medhor_id
		{
			get
			{
				return this._medhor_id;
			}
			set
			{
				if ((this._medhor_id != value))
				{
					this.Onmedhor_idChanging(value);
					this.SendPropertyChanging();
					this._medhor_id = value;
					this.SendPropertyChanged("medhor_id");
					this.Onmedhor_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_med_id", DbType="Int NOT NULL")]
		public int med_id
		{
			get
			{
				return this._med_id;
			}
			set
			{
				if ((this._med_id != value))
				{
					if (this._Medico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmed_idChanging(value);
					this.SendPropertyChanging();
					this._med_id = value;
					this.SendPropertyChanged("med_id");
					this.Onmed_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medhor_fecha", DbType="Date NOT NULL")]
		public System.DateTime medhor_fecha
		{
			get
			{
				return this._medhor_fecha;
			}
			set
			{
				if ((this._medhor_fecha != value))
				{
					this.Onmedhor_fechaChanging(value);
					this.SendPropertyChanging();
					this._medhor_fecha = value;
					this.SendPropertyChanged("medhor_fecha");
					this.Onmedhor_fechaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medhor_hora", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string medhor_hora
		{
			get
			{
				return this._medhor_hora;
			}
			set
			{
				if ((this._medhor_hora != value))
				{
					this.Onmedhor_horaChanging(value);
					this.SendPropertyChanging();
					this._medhor_hora = value;
					this.SendPropertyChanged("medhor_hora");
					this.Onmedhor_horaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_Horario_Citas", Storage="_Citas", ThisKey="medhor_id", OtherKey="medhor_id")]
		public EntitySet<Citas> Citas
		{
			get
			{
				return this._Citas;
			}
			set
			{
				this._Citas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_Medico_Horario", Storage="_Medico", ThisKey="med_id", OtherKey="med_id", IsForeignKey=true)]
		public Medico Medico
		{
			get
			{
				return this._Medico.Entity;
			}
			set
			{
				Medico previousValue = this._Medico.Entity;
				if (((previousValue != value) 
							|| (this._Medico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medico.Entity = null;
						previousValue.Medico_Horario.Remove(this);
					}
					this._Medico.Entity = value;
					if ((value != null))
					{
						value.Medico_Horario.Add(this);
						this._med_id = value.med_id;
					}
					else
					{
						this._med_id = default(int);
					}
					this.SendPropertyChanged("Medico");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Medico_Horario = this;
		}
		
		private void detach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Medico_Horario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paciente")]
	public partial class Paciente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _paci_id;
		
		private string _paci_peso;
		
		private string _paci_tiposangre;
		
		private string _paci_estatura;
		
		private string _paci_sintoma;
		
		private int _per_id;
		
		private EntitySet<Citas> _Citas;
		
		private EntityRef<Persona> _Persona;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpaci_idChanging(int value);
    partial void Onpaci_idChanged();
    partial void Onpaci_pesoChanging(string value);
    partial void Onpaci_pesoChanged();
    partial void Onpaci_tiposangreChanging(string value);
    partial void Onpaci_tiposangreChanged();
    partial void Onpaci_estaturaChanging(string value);
    partial void Onpaci_estaturaChanged();
    partial void Onpaci_sintomaChanging(string value);
    partial void Onpaci_sintomaChanged();
    partial void Onper_idChanging(int value);
    partial void Onper_idChanged();
    #endregion
		
		public Paciente()
		{
			this._Citas = new EntitySet<Citas>(new Action<Citas>(this.attach_Citas), new Action<Citas>(this.detach_Citas));
			this._Persona = default(EntityRef<Persona>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paci_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int paci_id
		{
			get
			{
				return this._paci_id;
			}
			set
			{
				if ((this._paci_id != value))
				{
					this.Onpaci_idChanging(value);
					this.SendPropertyChanging();
					this._paci_id = value;
					this.SendPropertyChanged("paci_id");
					this.Onpaci_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paci_peso", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string paci_peso
		{
			get
			{
				return this._paci_peso;
			}
			set
			{
				if ((this._paci_peso != value))
				{
					this.Onpaci_pesoChanging(value);
					this.SendPropertyChanging();
					this._paci_peso = value;
					this.SendPropertyChanged("paci_peso");
					this.Onpaci_pesoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paci_tiposangre", DbType="VarChar(10)")]
		public string paci_tiposangre
		{
			get
			{
				return this._paci_tiposangre;
			}
			set
			{
				if ((this._paci_tiposangre != value))
				{
					this.Onpaci_tiposangreChanging(value);
					this.SendPropertyChanging();
					this._paci_tiposangre = value;
					this.SendPropertyChanged("paci_tiposangre");
					this.Onpaci_tiposangreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paci_estatura", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string paci_estatura
		{
			get
			{
				return this._paci_estatura;
			}
			set
			{
				if ((this._paci_estatura != value))
				{
					this.Onpaci_estaturaChanging(value);
					this.SendPropertyChanging();
					this._paci_estatura = value;
					this.SendPropertyChanged("paci_estatura");
					this.Onpaci_estaturaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paci_sintoma", DbType="NChar(10)")]
		public string paci_sintoma
		{
			get
			{
				return this._paci_sintoma;
			}
			set
			{
				if ((this._paci_sintoma != value))
				{
					this.Onpaci_sintomaChanging(value);
					this.SendPropertyChanging();
					this._paci_sintoma = value;
					this.SendPropertyChanged("paci_sintoma");
					this.Onpaci_sintomaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_id", DbType="Int NOT NULL")]
		public int per_id
		{
			get
			{
				return this._per_id;
			}
			set
			{
				if ((this._per_id != value))
				{
					if (this._Persona.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onper_idChanging(value);
					this.SendPropertyChanging();
					this._per_id = value;
					this.SendPropertyChanged("per_id");
					this.Onper_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Paciente_Citas", Storage="_Citas", ThisKey="paci_id", OtherKey="paci_id")]
		public EntitySet<Citas> Citas
		{
			get
			{
				return this._Citas;
			}
			set
			{
				this._Citas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persona_Paciente", Storage="_Persona", ThisKey="per_id", OtherKey="per_id", IsForeignKey=true)]
		public Persona Persona
		{
			get
			{
				return this._Persona.Entity;
			}
			set
			{
				Persona previousValue = this._Persona.Entity;
				if (((previousValue != value) 
							|| (this._Persona.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persona.Entity = null;
						previousValue.Paciente.Remove(this);
					}
					this._Persona.Entity = value;
					if ((value != null))
					{
						value.Paciente.Add(this);
						this._per_id = value.per_id;
					}
					else
					{
						this._per_id = default(int);
					}
					this.SendPropertyChanged("Persona");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = this;
		}
		
		private void detach_Citas(Citas entity)
		{
			this.SendPropertyChanging();
			entity.Paciente = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persona")]
	public partial class Persona : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _per_id;
		
		private string _per_nombres;
		
		private string _per_apellidos;
		
		private System.Nullable<int> _per_cedula;
		
		private string _per_email;
		
		private string _per_telefono;
		
		private System.DateTime _per_fechanacimiento;
		
		private string _per_genero;
		
		private string _per_direccion;
		
		private string _per_estado;
		
		private System.DateTime _per_fechaCreacion;
		
		private string _per_usuario;
		
		private string _per_contrasenia;
		
		private int _id_tipousu;
		
		private EntitySet<Medico> _Medico;
		
		private EntitySet<Paciente> _Paciente;
		
		private EntityRef<Tipo_usuario> _Tipo_usuario;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onper_idChanging(int value);
    partial void Onper_idChanged();
    partial void Onper_nombresChanging(string value);
    partial void Onper_nombresChanged();
    partial void Onper_apellidosChanging(string value);
    partial void Onper_apellidosChanged();
    partial void Onper_cedulaChanging(System.Nullable<int> value);
    partial void Onper_cedulaChanged();
    partial void Onper_emailChanging(string value);
    partial void Onper_emailChanged();
    partial void Onper_telefonoChanging(string value);
    partial void Onper_telefonoChanged();
    partial void Onper_fechanacimientoChanging(System.DateTime value);
    partial void Onper_fechanacimientoChanged();
    partial void Onper_generoChanging(string value);
    partial void Onper_generoChanged();
    partial void Onper_direccionChanging(string value);
    partial void Onper_direccionChanged();
    partial void Onper_estadoChanging(string value);
    partial void Onper_estadoChanged();
    partial void Onper_fechaCreacionChanging(System.DateTime value);
    partial void Onper_fechaCreacionChanged();
    partial void Onper_usuarioChanging(string value);
    partial void Onper_usuarioChanged();
    partial void Onper_contraseniaChanging(string value);
    partial void Onper_contraseniaChanged();
    partial void Onid_tipousuChanging(int value);
    partial void Onid_tipousuChanged();
    #endregion
		
		public Persona()
		{
			this._Medico = new EntitySet<Medico>(new Action<Medico>(this.attach_Medico), new Action<Medico>(this.detach_Medico));
			this._Paciente = new EntitySet<Paciente>(new Action<Paciente>(this.attach_Paciente), new Action<Paciente>(this.detach_Paciente));
			this._Tipo_usuario = default(EntityRef<Tipo_usuario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int per_id
		{
			get
			{
				return this._per_id;
			}
			set
			{
				if ((this._per_id != value))
				{
					this.Onper_idChanging(value);
					this.SendPropertyChanging();
					this._per_id = value;
					this.SendPropertyChanged("per_id");
					this.Onper_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_nombres", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string per_nombres
		{
			get
			{
				return this._per_nombres;
			}
			set
			{
				if ((this._per_nombres != value))
				{
					this.Onper_nombresChanging(value);
					this.SendPropertyChanging();
					this._per_nombres = value;
					this.SendPropertyChanged("per_nombres");
					this.Onper_nombresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_apellidos", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string per_apellidos
		{
			get
			{
				return this._per_apellidos;
			}
			set
			{
				if ((this._per_apellidos != value))
				{
					this.Onper_apellidosChanging(value);
					this.SendPropertyChanging();
					this._per_apellidos = value;
					this.SendPropertyChanged("per_apellidos");
					this.Onper_apellidosChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_cedula", DbType="Int")]
		public System.Nullable<int> per_cedula
		{
			get
			{
				return this._per_cedula;
			}
			set
			{
				if ((this._per_cedula != value))
				{
					this.Onper_cedulaChanging(value);
					this.SendPropertyChanging();
					this._per_cedula = value;
					this.SendPropertyChanged("per_cedula");
					this.Onper_cedulaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string per_email
		{
			get
			{
				return this._per_email;
			}
			set
			{
				if ((this._per_email != value))
				{
					this.Onper_emailChanging(value);
					this.SendPropertyChanging();
					this._per_email = value;
					this.SendPropertyChanged("per_email");
					this.Onper_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_telefono", DbType="NChar(10)")]
		public string per_telefono
		{
			get
			{
				return this._per_telefono;
			}
			set
			{
				if ((this._per_telefono != value))
				{
					this.Onper_telefonoChanging(value);
					this.SendPropertyChanging();
					this._per_telefono = value;
					this.SendPropertyChanged("per_telefono");
					this.Onper_telefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_fechanacimiento", DbType="Date NOT NULL")]
		public System.DateTime per_fechanacimiento
		{
			get
			{
				return this._per_fechanacimiento;
			}
			set
			{
				if ((this._per_fechanacimiento != value))
				{
					this.Onper_fechanacimientoChanging(value);
					this.SendPropertyChanging();
					this._per_fechanacimiento = value;
					this.SendPropertyChanged("per_fechanacimiento");
					this.Onper_fechanacimientoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_genero", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string per_genero
		{
			get
			{
				return this._per_genero;
			}
			set
			{
				if ((this._per_genero != value))
				{
					this.Onper_generoChanging(value);
					this.SendPropertyChanging();
					this._per_genero = value;
					this.SendPropertyChanged("per_genero");
					this.Onper_generoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_direccion", DbType="VarChar(100)")]
		public string per_direccion
		{
			get
			{
				return this._per_direccion;
			}
			set
			{
				if ((this._per_direccion != value))
				{
					this.Onper_direccionChanging(value);
					this.SendPropertyChanging();
					this._per_direccion = value;
					this.SendPropertyChanged("per_direccion");
					this.Onper_direccionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_estado", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string per_estado
		{
			get
			{
				return this._per_estado;
			}
			set
			{
				if ((this._per_estado != value))
				{
					this.Onper_estadoChanging(value);
					this.SendPropertyChanging();
					this._per_estado = value;
					this.SendPropertyChanged("per_estado");
					this.Onper_estadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_fechaCreacion", DbType="Date NOT NULL")]
		public System.DateTime per_fechaCreacion
		{
			get
			{
				return this._per_fechaCreacion;
			}
			set
			{
				if ((this._per_fechaCreacion != value))
				{
					this.Onper_fechaCreacionChanging(value);
					this.SendPropertyChanging();
					this._per_fechaCreacion = value;
					this.SendPropertyChanged("per_fechaCreacion");
					this.Onper_fechaCreacionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_usuario", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string per_usuario
		{
			get
			{
				return this._per_usuario;
			}
			set
			{
				if ((this._per_usuario != value))
				{
					this.Onper_usuarioChanging(value);
					this.SendPropertyChanging();
					this._per_usuario = value;
					this.SendPropertyChanged("per_usuario");
					this.Onper_usuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_per_contrasenia", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string per_contrasenia
		{
			get
			{
				return this._per_contrasenia;
			}
			set
			{
				if ((this._per_contrasenia != value))
				{
					this.Onper_contraseniaChanging(value);
					this.SendPropertyChanging();
					this._per_contrasenia = value;
					this.SendPropertyChanged("per_contrasenia");
					this.Onper_contraseniaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_tipousu", DbType="Int NOT NULL")]
		public int id_tipousu
		{
			get
			{
				return this._id_tipousu;
			}
			set
			{
				if ((this._id_tipousu != value))
				{
					if (this._Tipo_usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_tipousuChanging(value);
					this.SendPropertyChanging();
					this._id_tipousu = value;
					this.SendPropertyChanged("id_tipousu");
					this.Onid_tipousuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persona_Medico", Storage="_Medico", ThisKey="per_id", OtherKey="per_id")]
		public EntitySet<Medico> Medico
		{
			get
			{
				return this._Medico;
			}
			set
			{
				this._Medico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persona_Paciente", Storage="_Paciente", ThisKey="per_id", OtherKey="per_id")]
		public EntitySet<Paciente> Paciente
		{
			get
			{
				return this._Paciente;
			}
			set
			{
				this._Paciente.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipo_usuario_Persona", Storage="_Tipo_usuario", ThisKey="id_tipousu", OtherKey="id_tipousu", IsForeignKey=true)]
		public Tipo_usuario Tipo_usuario
		{
			get
			{
				return this._Tipo_usuario.Entity;
			}
			set
			{
				Tipo_usuario previousValue = this._Tipo_usuario.Entity;
				if (((previousValue != value) 
							|| (this._Tipo_usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tipo_usuario.Entity = null;
						previousValue.Persona.Remove(this);
					}
					this._Tipo_usuario.Entity = value;
					if ((value != null))
					{
						value.Persona.Add(this);
						this._id_tipousu = value.id_tipousu;
					}
					else
					{
						this._id_tipousu = default(int);
					}
					this.SendPropertyChanged("Tipo_usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medico(Medico entity)
		{
			this.SendPropertyChanging();
			entity.Persona = this;
		}
		
		private void detach_Medico(Medico entity)
		{
			this.SendPropertyChanging();
			entity.Persona = null;
		}
		
		private void attach_Paciente(Paciente entity)
		{
			this.SendPropertyChanging();
			entity.Persona = this;
		}
		
		private void detach_Paciente(Paciente entity)
		{
			this.SendPropertyChanging();
			entity.Persona = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tipo_usuario")]
	public partial class Tipo_usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_tipousu;
		
		private string _nombre_tipousu;
		
		private EntitySet<Persona> _Persona;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_tipousuChanging(int value);
    partial void Onid_tipousuChanged();
    partial void Onnombre_tipousuChanging(string value);
    partial void Onnombre_tipousuChanged();
    #endregion
		
		public Tipo_usuario()
		{
			this._Persona = new EntitySet<Persona>(new Action<Persona>(this.attach_Persona), new Action<Persona>(this.detach_Persona));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_tipousu", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_tipousu
		{
			get
			{
				return this._id_tipousu;
			}
			set
			{
				if ((this._id_tipousu != value))
				{
					this.Onid_tipousuChanging(value);
					this.SendPropertyChanging();
					this._id_tipousu = value;
					this.SendPropertyChanged("id_tipousu");
					this.Onid_tipousuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nombre_tipousu", DbType="VarChar(50)")]
		public string nombre_tipousu
		{
			get
			{
				return this._nombre_tipousu;
			}
			set
			{
				if ((this._nombre_tipousu != value))
				{
					this.Onnombre_tipousuChanging(value);
					this.SendPropertyChanging();
					this._nombre_tipousu = value;
					this.SendPropertyChanged("nombre_tipousu");
					this.Onnombre_tipousuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipo_usuario_Persona", Storage="_Persona", ThisKey="id_tipousu", OtherKey="id_tipousu")]
		public EntitySet<Persona> Persona
		{
			get
			{
				return this._Persona;
			}
			set
			{
				this._Persona.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persona(Persona entity)
		{
			this.SendPropertyChanging();
			entity.Tipo_usuario = this;
		}
		
		private void detach_Persona(Persona entity)
		{
			this.SendPropertyChanging();
			entity.Tipo_usuario = null;
		}
	}
}
#pragma warning restore 1591
